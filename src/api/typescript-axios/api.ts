/* tslint:disable */
/* eslint-disable */
/**
 * Simple Inventory API
 * This is a simple API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CategoryGetResponse
 */
export interface CategoryGetResponse {
    /**
     * 
     * @type {string}
     * @memberof CategoryGetResponse
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryGetResponse
     */
    'categoryName': string;
    /**
     * 
     * @type {number}
     * @memberof CategoryGetResponse
     */
    'level': number;
}
/**
 * 
 * @export
 * @interface UserAnswerPostRequest
 */
export interface UserAnswerPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAnswerPostRequest
     */
    'questionId': string;
    /**
     * 
     * @type {string}
     * @memberof UserAnswerPostRequest
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface UserAnswerTimePostRequest
 */
export interface UserAnswerTimePostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAnswerTimePostRequest
     */
    'questionId': string;
}
/**
 * 
 * @export
 * @interface UserPracticeHistoryGetResponse
 */
export interface UserPracticeHistoryGetResponse {
    /**
     * 
     * @type {string}
     * @memberof UserPracticeHistoryGetResponse
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof UserPracticeHistoryGetResponse
     */
    'categoryName': string;
    /**
     * 
     * @type {number}
     * @memberof UserPracticeHistoryGetResponse
     */
    'level': number;
}
/**
 * 
 * @export
 * @interface UserPracticeScoreGetResponse
 */
export interface UserPracticeScoreGetResponse {
    /**
     * 
     * @type {string}
     * @memberof UserPracticeScoreGetResponse
     */
    'questionId': string;
    /**
     * 
     * @type {string}
     * @memberof UserPracticeScoreGetResponse
     */
    'questionText': string;
    /**
     * 
     * @type {number}
     * @memberof UserPracticeScoreGetResponse
     */
    'score': number;
    /**
     * 
     * @type {Array<UserPracticeScoreGetResponseItem>}
     * @memberof UserPracticeScoreGetResponse
     */
    'scoreDistribution': Array<UserPracticeScoreGetResponseItem>;
}
/**
 * 
 * @export
 * @interface UserPracticeScoreGetResponseItem
 */
export interface UserPracticeScoreGetResponseItem {
    /**
     * 
     * @type {string}
     * @memberof UserPracticeScoreGetResponseItem
     */
    'bin': string;
    /**
     * 
     * @type {number}
     * @memberof UserPracticeScoreGetResponseItem
     */
    'count': number;
}

/**
 * AkapenApi - axios parameter creator
 * @export
 */
export const AkapenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザーの学習済みカテゴリーの検索 
         * @summary ユーザーの学習済みカテゴリーの検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPracticeHistory: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/practice/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 該当するカテゴリーIDに紐づく問題のユーザーのスコアを取得します 
         * @summary ユーザーのスコアを取得
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPracticeScore: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getUserPracticeScore', 'categoryId', categoryId)
            const localVarPath = `/user/practice/score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーの回答開始時刻を登録 
         * @summary ユーザーの回答開始時刻を登録
         * @param {UserAnswerTimePostRequest} [userAnswerTimePostRequest] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserAnswerTime: async (userAnswerTimePostRequest?: UserAnswerTimePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timer/initiation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAnswerTimePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーが問題に対する回答を送信します 
         * @summary ユーザーの回答を送信
         * @param {UserAnswerPostRequest} [userAnswerPostRequest] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserAnswers: async (userAnswerPostRequest?: UserAnswerPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAnswerPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 問題カテゴリを検索します 
         * @summary 問題カテゴリを検索
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCategories: async (searchString?: string, skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 問題カテゴリを検索します 
         * @summary 問題を検索
         * @param {boolean} mode 検索モードの指定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQuestions: async (mode: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mode' is not null or undefined
            assertParamExists('searchQuestions', 'mode', mode)
            const localVarPath = `/question`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AkapenApi - functional programming interface
 * @export
 */
export const AkapenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AkapenApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザーの学習済みカテゴリーの検索 
         * @summary ユーザーの学習済みカテゴリーの検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPracticeHistory(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryGetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPracticeHistory(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkapenApi.getUserPracticeHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 該当するカテゴリーIDに紐づく問題のユーザーのスコアを取得します 
         * @summary ユーザーのスコアを取得
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPracticeScore(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPracticeScoreGetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPracticeScore(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkapenApi.getUserPracticeScore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ユーザーの回答開始時刻を登録 
         * @summary ユーザーの回答開始時刻を登録
         * @param {UserAnswerTimePostRequest} [userAnswerTimePostRequest] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserAnswerTime(userAnswerTimePostRequest?: UserAnswerTimePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserAnswerTime(userAnswerTimePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkapenApi.postUserAnswerTime']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ユーザーが問題に対する回答を送信します 
         * @summary ユーザーの回答を送信
         * @param {UserAnswerPostRequest} [userAnswerPostRequest] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserAnswers(userAnswerPostRequest?: UserAnswerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserAnswers(userAnswerPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkapenApi.postUserAnswers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 問題カテゴリを検索します 
         * @summary 問題カテゴリを検索
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCategories(searchString?: string, skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryGetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCategories(searchString, skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkapenApi.searchCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 問題カテゴリを検索します 
         * @summary 問題を検索
         * @param {boolean} mode 検索モードの指定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchQuestions(mode: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryGetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchQuestions(mode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkapenApi.searchQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AkapenApi - factory interface
 * @export
 */
export const AkapenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AkapenApiFp(configuration)
    return {
        /**
         * ユーザーの学習済みカテゴリーの検索 
         * @summary ユーザーの学習済みカテゴリーの検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPracticeHistory(options?: any): AxiosPromise<Array<CategoryGetResponse>> {
            return localVarFp.getUserPracticeHistory(options).then((request) => request(axios, basePath));
        },
        /**
         * 該当するカテゴリーIDに紐づく問題のユーザーのスコアを取得します 
         * @summary ユーザーのスコアを取得
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPracticeScore(categoryId: string, options?: any): AxiosPromise<Array<UserPracticeScoreGetResponse>> {
            return localVarFp.getUserPracticeScore(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーの回答開始時刻を登録 
         * @summary ユーザーの回答開始時刻を登録
         * @param {UserAnswerTimePostRequest} [userAnswerTimePostRequest] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserAnswerTime(userAnswerTimePostRequest?: UserAnswerTimePostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUserAnswerTime(userAnswerTimePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーが問題に対する回答を送信します 
         * @summary ユーザーの回答を送信
         * @param {UserAnswerPostRequest} [userAnswerPostRequest] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserAnswers(userAnswerPostRequest?: UserAnswerPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUserAnswers(userAnswerPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 問題カテゴリを検索します 
         * @summary 問題カテゴリを検索
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCategories(searchString?: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<CategoryGetResponse>> {
            return localVarFp.searchCategories(searchString, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 問題カテゴリを検索します 
         * @summary 問題を検索
         * @param {boolean} mode 検索モードの指定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQuestions(mode: boolean, options?: any): AxiosPromise<Array<CategoryGetResponse>> {
            return localVarFp.searchQuestions(mode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AkapenApi - object-oriented interface
 * @export
 * @class AkapenApi
 * @extends {BaseAPI}
 */
export class AkapenApi extends BaseAPI {
    /**
     * ユーザーの学習済みカテゴリーの検索 
     * @summary ユーザーの学習済みカテゴリーの検索
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkapenApi
     */
    public getUserPracticeHistory(options?: RawAxiosRequestConfig) {
        return AkapenApiFp(this.configuration).getUserPracticeHistory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 該当するカテゴリーIDに紐づく問題のユーザーのスコアを取得します 
     * @summary ユーザーのスコアを取得
     * @param {string} categoryId カテゴリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkapenApi
     */
    public getUserPracticeScore(categoryId: string, options?: RawAxiosRequestConfig) {
        return AkapenApiFp(this.configuration).getUserPracticeScore(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーの回答開始時刻を登録 
     * @summary ユーザーの回答開始時刻を登録
     * @param {UserAnswerTimePostRequest} [userAnswerTimePostRequest] Inventory item to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkapenApi
     */
    public postUserAnswerTime(userAnswerTimePostRequest?: UserAnswerTimePostRequest, options?: RawAxiosRequestConfig) {
        return AkapenApiFp(this.configuration).postUserAnswerTime(userAnswerTimePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーが問題に対する回答を送信します 
     * @summary ユーザーの回答を送信
     * @param {UserAnswerPostRequest} [userAnswerPostRequest] Inventory item to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkapenApi
     */
    public postUserAnswers(userAnswerPostRequest?: UserAnswerPostRequest, options?: RawAxiosRequestConfig) {
        return AkapenApiFp(this.configuration).postUserAnswers(userAnswerPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 問題カテゴリを検索します 
     * @summary 問題カテゴリを検索
     * @param {string} [searchString] pass an optional search string for looking up inventory
     * @param {number} [skip] number of records to skip for pagination
     * @param {number} [limit] maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkapenApi
     */
    public searchCategories(searchString?: string, skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return AkapenApiFp(this.configuration).searchCategories(searchString, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 問題カテゴリを検索します 
     * @summary 問題を検索
     * @param {boolean} mode 検索モードの指定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkapenApi
     */
    public searchQuestions(mode: boolean, options?: RawAxiosRequestConfig) {
        return AkapenApiFp(this.configuration).searchQuestions(mode, options).then((request) => request(this.axios, this.basePath));
    }
}



